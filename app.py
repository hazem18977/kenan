"""
Streamlit Web Application for Kinetic Modeling Analysis
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO

# Import custom modules
from data_processor import validate_data_structure, preprocess_data, get_data_summary, read_csv_file
from kinetic_models import (
    find_stable_points, fit_pfo_model, fit_pso_model,
    create_results_summary, create_detailed_results
)
from visualization import create_matplotlib_plots

# Configure page
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
    page_icon="üß™",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Professional CSS styling for scientific/industrial application
st.markdown("""
<style>
/* Import professional fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');

/* Global styling */
.stApp {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}

/* Main container styling */
.main .block-container {
    padding-top: 2rem;
    padding-bottom: 2rem;
    max-width: 1200px;
}

/* Header styling */
.main-header {
    background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
    color: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(30, 64, 175, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.main-header h1 {
    margin: 0;
    font-weight: 600;
    font-size: 2.2rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Info card styling */
.info-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    padding: 1.5rem;
    border-radius: 12px;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
}

.info-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
}

.info-card p {
    margin: 0;
    font-size: 14px;
    color: #475569;
    line-height: 1.6;
}

.info-card strong {
    color: #1e293b;
    font-weight: 600;
}

/* Section styling */
.section-container {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
}

.section-container:hover {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
}

/* Sidebar styling */
.css-1d391kg {
    background: linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
    border-right: 2px solid #e2e8f0;
}

.css-1d391kg .css-1v0mbdj {
    border-radius: 8px;
    margin-bottom: 1rem;
}

/* Metric cards styling */
.metric-container {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    padding: 1.5rem;
    border-radius: 12px;
    margin: 0.5rem 0;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
}

.metric-container:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
}

/* Enhanced metric styling */
[data-testid="metric-container"] {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border: 1px solid #e2e8f0;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
}

[data-testid="metric-container"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
    border-color: #3b82f6;
}

[data-testid="metric-container"] [data-testid="metric-value"] {
    font-size: 1.8rem;
    font-weight: 700;
    color: #1e40af;
}

[data-testid="metric-container"] [data-testid="metric-label"] {
    color: #64748b;
    font-weight: 500;
    font-size: 0.9rem;
}

/* Special metric styling for key results */
.key-metric {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    border: 2px solid #3b82f6;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(59, 130, 246, 0.2);
    margin: 1rem 0;
    transition: all 0.3s ease;
}

.key-metric:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 24px rgba(59, 130, 246, 0.3);
}

.key-metric .metric-value {
    font-size: 2rem;
    font-weight: 800;
    color: #1e40af;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.key-metric .metric-label {
    color: #1e40af;
    font-weight: 600;
    font-size: 1rem;
}

/* Performance metric styling */
.performance-metric {
    background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
    border: 2px solid #10b981;
    padding: 1.2rem;
    border-radius: 10px;
    margin: 0.8rem 0;
    box-shadow: 0 3px 12px rgba(16, 185, 129, 0.15);
    transition: all 0.3s ease;
}

.performance-metric:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(16, 185, 129, 0.25);
}

.performance-metric .metric-value {
    font-size: 1.6rem;
    font-weight: 700;
    color: #047857;
}

.performance-metric .metric-label {
    color: #065f46;
    font-weight: 600;
    font-size: 0.95rem;
}

/* Summary statistics styling */
.summary-stat {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border: 2px solid #f59e0b;
    padding: 1.2rem;
    border-radius: 10px;
    margin: 0.8rem 0;
    box-shadow: 0 3px 12px rgba(245, 158, 11, 0.15);
    transition: all 0.3s ease;
}

.summary-stat:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(245, 158, 11, 0.25);
}

.summary-stat .metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #92400e;
}

.summary-stat .metric-label {
    color: #78350f;
    font-weight: 600;
    font-size: 0.9rem;
}

/* Button styling */
.stButton > button {
    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 2rem;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
}

.stButton > button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(59, 130, 246, 0.4);
    background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
}

.stButton > button:active {
    transform: translateY(0);
}

/* Download button special styling */
.stDownloadButton > button {
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 2rem;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
}

.stDownloadButton > button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(5, 150, 105, 0.4);
    background: linear-gradient(135deg, #047857 0%, #065f46 100%);
}

/* File uploader styling */
.stFileUploader {
    background: white;
    border: 2px dashed #cbd5e1;
    border-radius: 12px;
    padding: 2rem;
    transition: all 0.3s ease;
}

.stFileUploader:hover {
    border-color: #3b82f6;
    background: #f8fafc;
}

.stFileUploader [data-testid="stFileUploaderDropzone"] {
    border-radius: 8px;
}

/* Data editor styling */
.stDataFrame {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
    border: 1px solid #e2e8f0;
}

/* Radio button styling */
.stRadio > div {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

/* Selectbox styling */
.stSelectbox > div > div {
    background: white;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

/* Expander styling */
.streamlit-expanderHeader {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border-radius: 8px;
    border: 1px solid #cbd5e1;
    font-weight: 600;
    color: #1e293b;
}

.streamlit-expanderContent {
    background: white;
    border: 1px solid #e2e8f0;
    border-top: none;
    border-radius: 0 0 8px 8px;
}

/* Alert styling */
.stAlert {
    border-radius: 8px;
    border: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Success alert */
.stAlert[data-baseweb="notification"] {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    border-left: 4px solid #22c55e;
}

/* Info alert */
.stInfo {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    border-left: 4px solid #3b82f6;
}

/* Error alert */
.stError {
    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
    border-left: 4px solid #ef4444;
}

/* Warning alert */
.stWarning {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border-left: 4px solid #f59e0b;
}

/* Divider styling */
hr {
    border: none;
    height: 2px;
    background: linear-gradient(90deg, transparent 0%, #e2e8f0 50%, transparent 100%);
    margin: 2rem 0;
}

/* Typography improvements */
h1, h2, h3, h4, h5, h6 {
    color: #1e293b;
    font-weight: 600;
    line-height: 1.4;
}

h1 {
    font-size: 2.2rem;
    margin-bottom: 1rem;
}

h2 {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    color: #334155;
}

h3 {
    font-size: 1.4rem;
    margin-bottom: 0.8rem;
    color: #475569;
}

/* Enhanced section headers with color coding */
.section-header-data {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    color: #1e40af;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    border-left: 5px solid #3b82f6;
    margin: 1.5rem 0 1rem 0;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.15);
}

.section-header-results {
    background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
    color: #047857;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    border-left: 5px solid #10b981;
    margin: 1.5rem 0 1rem 0;
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.15);
}

.section-header-analysis {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    color: #92400e;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    border-left: 5px solid #f59e0b;
    margin: 1.5rem 0 1rem 0;
    box-shadow: 0 2px 8px rgba(245, 158, 11, 0.15);
}

.section-header-visualization {
    background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%);
    color: #7c2d12;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    border-left: 5px solid #a855f7;
    margin: 1.5rem 0 1rem 0;
    box-shadow: 0 2px 8px rgba(168, 85, 247, 0.15);
}

.section-header-download {
    background: linear-gradient(135deg, #fecaca 0%, #fca5a5 100%);
    color: #7f1d1d;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    border-left: 5px solid #ef4444;
    margin: 1.5rem 0 1rem 0;
    box-shadow: 0 2px 8px rgba(239, 68, 68, 0.15);
}

/* Highlighted info boxes */
.highlight-info {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    border: 2px solid #3b82f6;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 16px rgba(59, 130, 246, 0.2);
}

.highlight-success {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    border: 2px solid #22c55e;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 16px rgba(34, 197, 94, 0.2);
}

.highlight-warning {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    border: 2px solid #f59e0b;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 16px rgba(245, 158, 11, 0.2);
}

/* Code and monospace styling */
code {
    font-family: 'JetBrains Mono', 'Consolas', monospace;
    background: #f1f5f9;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9rem;
}

/* Responsive design */
@media (max-width: 768px) {
    .main .block-container {
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .main-header {
        padding: 1.5rem;
    }

    .main-header h1 {
        font-size: 1.8rem;
    }

    .section-container {
        padding: 1.5rem;
    }
}

/* Animation for loading states */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.stApp > div {
    animation: fadeIn 0.5s ease-out;
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f5f9;
}

::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
}
</style>
""", unsafe_allow_html=True)

def main():
    # Professional header with title
    st.markdown("""
    <div class="main-header">
        <h1>–ê–Ω–∞–ª–∏–∑ –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
    </div>
    """, unsafe_allow_html=True)

    # Student and supervisor information with enhanced styling
    st.markdown("""
    <div class="info-card">
        <p>
            <strong>–°–¢–£–î–ï–ù–¢:</strong> –ê–ª—Å–∞–¥–∏ –ö. <br>
            <strong>–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨:</strong> –ö–∏—Ä–µ–µ–≤–∞ –ê.–í
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar for parameters
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

        st.markdown("---")
        st.markdown("### üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É")
        st.markdown("""
        **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**
        - `—Ç, –º–∏–Ω` (–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö)
        - `–ê` (–û–ø—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å)

        **–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**
        - `–ê0` (–ù–∞—á–∞–ª—å–Ω–∞—è –û–ø—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å) - –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ê
        - `–ê/–ê0` (–û—Ç–Ω–æ—à–µ–Ω–∏–µ A/A0) - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - Excel (.xlsx,)
        - CSV (.csv) —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        """)

    # Data input method selection with enhanced styling and emoji
    st.markdown("""
    <div class="section-header-data">
        <h2>üìä –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö</h2>
    </div>
    """, unsafe_allow_html=True)

    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"],
        index=0,
        horizontal=True
    )

    df = None
    selected_sheet = None

    if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        # File upload section with enhanced styling and emoji
        st.markdown("""
        <div class="section-header-data">
            <h3>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</h3>
        </div>
        """, unsafe_allow_html=True)

        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            type=['xlsx', 'csv'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV —Å –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        )

        if uploaded_file is not None:
            try:
                file_extension = uploaded_file.name.split('.')[-1].lower()

                if file_extension == 'csv':
                    # Handle CSV files
                    df = read_csv_file(uploaded_file)

                    # Check if file is empty
                    if df.empty:
                        st.error("–§–∞–π–ª CSV –ø—É—Å—Ç")
                        return

                else:
                    # Handle Excel files
                    excel_file = pd.ExcelFile(uploaded_file)
                    sheet_names = excel_file.sheet_names

                    # Add sheet selector to sidebar if multiple sheets exist
                    selected_sheet = None
                    if len(sheet_names) > 1:
                        with st.sidebar:
                            st.markdown("---")
                            selected_sheet = st.selectbox(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç Excel",
                                sheet_names,
                                index=0,
                                help="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ"
                            )
                    else:
                        selected_sheet = sheet_names[0]

                    # Read the selected sheet
                    try:
                        df = pd.read_excel(uploaded_file, sheet_name=selected_sheet)

                        # Check if sheet is empty
                        if df.empty:
                            st.error(f"–õ–∏—Å—Ç '{selected_sheet}' –ø—É—Å—Ç")
                            if len(sheet_names) > 1:
                                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                            return

                    except Exception as sheet_error:
                        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ '{selected_sheet}': {str(sheet_error)}")
                        if len(sheet_names) > 1:
                            st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                        return

                # Validate structure (common for both CSV and Excel)
                is_valid, error_message = validate_data_structure(df)

                if not is_valid:
                    st.error(f"{error_message}")
                    if file_extension != 'csv' and len(sheet_names) > 1:
                        st.error(f"–õ–∏—Å—Ç '{selected_sheet}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–∏—Å—Ç.")
                    return

                # Check if –ê0 column is missing and auto-calculate if needed
                auto_a0_calculated = False
                if '–ê0' not in df.columns:
                    if '–ê' in df.columns and len(df) > 0:
                        # Convert –ê column to numeric first
                        df['–ê'] = pd.to_numeric(df['–ê'], errors='coerce')

                        # Find the first valid –ê value
                        valid_a_mask = (df['–ê'] > 0) & (~df['–ê'].isna())
                        if valid_a_mask.any():
                            first_a_value = df.loc[valid_a_mask, '–ê'].iloc[0]
                            df['–ê0'] = first_a_value
                            auto_a0_calculated = True
                            st.markdown(f"""
                            <div class="highlight-success">
                                <strong>‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</strong> –ê0 = {first_a_value:.5f} (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ê)
                            </div>
                            """, unsafe_allow_html=True)
                            st.markdown("""
                            <div class="highlight-info">
                                <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –°—Ç–æ–ª–±–µ—Ü –ê0 –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –≤ —Ñ–∞–π–ª–µ –∏ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ê
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ê0: –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ –ê")
                            return
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ê0: —Å—Ç–æ–ª–±–µ—Ü –ê –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç")
                        return

                # Auto-calculate –ê/–ê0 if missing
                if '–ê/–ê0' not in df.columns and '–ê' in df.columns and '–ê0' in df.columns:
                    df['–ê/–ê0'] = df['–ê'] / df['–ê0']
                    if auto_a0_calculated:
                        st.markdown("""
                        <div class="highlight-info">
                            <strong>‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç:</strong> –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
                        </div>
                        """, unsafe_allow_html=True)

                st.markdown("""
                <div class="highlight-success">
                    <strong>‚úÖ –£—Å–ø–µ—à–Ω–æ:</strong> –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!
                </div>
                """, unsafe_allow_html=True)
                if file_extension != 'csv' and len(sheet_names) > 1:
                    st.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–∏—Å—Ç: **{selected_sheet}**")

                # Show raw data preview
                with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                    st.dataframe(df, use_container_width=True)
                    st.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")

                    # Debug information for CSV files
                    if file_extension == 'csv':
                        st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö:**")
                        for col in ['—Ç, –º–∏–Ω', '–ê', '–ê0', '–ê/–ê0']:
                            if col in df.columns:
                                sample_values = df[col].head(3).tolist()
                                data_type = df[col].dtype
                                st.text(f"{col}: {data_type} | –ü—Ä–∏–º–µ—Ä—ã: {sample_values}")

                # Data editing section for uploaded files
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")

                # Show different messages based on whether –ê0 was auto-calculated
                if auto_a0_calculated:
                    st.info("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º. –ê0 –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ê –∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                else:
                    st.info("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º. –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –ê –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0 –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤. –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

                # Initialize session state for uploaded file editing
                if 'uploaded_first_a_value' not in st.session_state:
                    st.session_state.uploaded_first_a_value = None

                # Prepare data for editing (remove –ê0 column from display)
                edit_df = df.copy()
                display_columns = ['—Ç, –º–∏–Ω', '–ê']

                # Create display dataframe with only the columns we want to show
                edit_df_display = edit_df[display_columns].copy()

                # Configure column settings for the data editor
                column_config = {
                    "—Ç, –º–∏–Ω": st.column_config.NumberColumn(
                        "–í—Ä–µ–º—è (–º–∏–Ω)",
                        help="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö",
                        min_value=0.0,
                        step=0.0001,
                        format="%.4f"
                    ),
                    "–ê": st.column_config.NumberColumn(
                        "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                        help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê (–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ê0)",
                        min_value=0.0,
                        step=0.0001,
                        format="%.5f"
                    )
                }

                # Create editable data table (only show —Ç, –º–∏–Ω and –ê columns)
                edited_df = st.data_editor(
                    edit_df_display,
                    use_container_width=True,
                    num_rows="dynamic",
                    column_config=column_config,
                    key="uploaded_data_editor"
                )

                # Auto-calculate –ê/–ê0 if –ê column exists
                if '–ê' in edited_df.columns:
                    # Create a copy to avoid modifying the original
                    processed_edited_df = edited_df.copy()

                    # Apply auto-population logic: if first A value exists, populate all A0 values
                    if len(processed_edited_df) > 0 and processed_edited_df.iloc[0]['–ê'] > 0:
                        first_a_value = processed_edited_df.iloc[0]['–ê']
                        # Auto-populate all A0 values with the first A value
                        processed_edited_df['–ê0'] = first_a_value

                        # Show auto-population notification
                        if first_a_value != st.session_state.uploaded_first_a_value:
                            st.session_state.uploaded_first_a_value = first_a_value
                            st.success(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ê0 = {first_a_value:.5f} (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ê)")

                        # Remove rows with invalid data
                        valid_mask = (processed_edited_df['–ê'] > 0) & (processed_edited_df['–ê0'] > 0) & (processed_edited_df['—Ç, –º–∏–Ω'] >= 0)
                        processed_edited_df = processed_edited_df[valid_mask]

                        if not processed_edited_df.empty:
                            # Recalculate –ê/–ê0
                            processed_edited_df['–ê/–ê0'] = processed_edited_df['–ê'] / processed_edited_df['–ê0']
                            processed_edited_df['–ê/–ê0'] = processed_edited_df['–ê/–ê0'].round(4)

                            # Update df to use the edited and processed data
                            df = processed_edited_df.copy()

                            # Show updated preview
                            with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                                # Show only visible columns plus –ê/–ê0
                                display_data = df[['—Ç, –º–∏–Ω', '–ê', '–ê/–ê0']].copy()
                                st.dataframe(display_data, use_container_width=True)
                                st.info(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(df)}")
                                if len(processed_edited_df) > 0 and processed_edited_df.iloc[0]['–ê'] > 0:
                                    st.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: –ê0 = {processed_edited_df.iloc[0]['–ê']:.5f} –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")
                        else:
                            st.warning("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.")
                            df = None

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

        else:
            # Instructions when no file is uploaded
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

    else:  # Manual data entry
        st.markdown("""
        <div class="section-header-data">
            <h3>‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö</h3>
        </div>
        """, unsafe_allow_html=True)

        # Initialize session state for tracking first A value
        if 'first_a_value' not in st.session_state:
            st.session_state.first_a_value = None
        if 'manual_data_initialized' not in st.session_state:
            st.session_state.manual_data_initialized = False

        # Create empty template data
        default_data = pd.DataFrame({
            '—Ç, –º–∏–Ω': [0.0],
            '–ê': [0.0]
        })

        st.info("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∏–∂–µ. –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –ê –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê0 –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤. –°—Ç–æ–ª–±–µ—Ü –ê/–ê0 –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        # Data editor
        edited_data = st.data_editor(
            default_data,
            num_rows="dynamic",
            use_container_width=True,
            column_config={
                "—Ç, –º–∏–Ω": st.column_config.NumberColumn(
                    "–í—Ä–µ–º—è (–º–∏–Ω)",
                    help="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö",
                    min_value=0.0,
                    step=0.0001,
                    format="%.4f"
                ),
                "–ê": st.column_config.NumberColumn(
                    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê",
                    help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ê (–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ê0)",
                    min_value=0.0,
                    step=0.0001,
                    format="%.5f"
                )
            },
            key="manual_data_editor"
        )

        # Auto-calculate A/A0 ratios and show preview
        if not edited_data.empty and '–ê' in edited_data.columns:
            # Apply auto-population logic: use first A value as A0 for all calculations
            processed_data = edited_data.copy()

            # Get the first valid A value (non-zero) from the first row
            first_a_value = None
            if len(processed_data) > 0 and processed_data.iloc[0]['–ê'] > 0:
                first_a_value = processed_data.iloc[0]['–ê']
                # Add –ê0 column internally for calculations
                processed_data['–ê0'] = first_a_value

                # Show auto-determination info
                if first_a_value != st.session_state.first_a_value:
                    st.session_state.first_a_value = first_a_value
                    st.success(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ê0 = {first_a_value:.5f} (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ê)")

                # Remove rows with zero or negative values
                valid_data = processed_data[(processed_data['–ê'] > 0) & (processed_data['–ê0'] > 0) & (processed_data['—Ç, –º–∏–Ω'] >= 0)]

                if not valid_data.empty:
                    # Calculate A/A0 ratios
                    valid_data = valid_data.copy()
                    valid_data['–ê/–ê0'] = valid_data['–ê'] / valid_data['–ê0']
                    valid_data['–ê/–ê0'] = valid_data['–ê/–ê0'].round(4)

                    # Show preview with calculated ratios (only visible columns plus –ê/–ê0)
                    st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ê/–ê0")
                    display_data = valid_data[['—Ç, –º–∏–Ω', '–ê', '–ê/–ê0']].copy()
                    st.dataframe(display_data, use_container_width=True)
                    st.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: –ê0 = {first_a_value:.5f} –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")

        # Validate manual data
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
            if edited_data.empty:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            else:
                # Use the processed data with auto-population and calculated A/A0
                if not edited_data.empty and '–ê' in edited_data.columns:
                    # Apply auto-population logic first
                    processed_data = edited_data.copy()

                    # Get the first valid A value (non-zero) from the first row
                    if len(processed_data) > 0 and processed_data.iloc[0]['–ê'] > 0:
                        first_a_value = processed_data.iloc[0]['–ê']
                        # Auto-populate all A0 values with the first A value
                        processed_data['–ê0'] = first_a_value
                    else:
                        st.error("–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ –ê –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        return

                    # Remove rows with zero or negative values
                    valid_data = processed_data[(processed_data['–ê'] > 0) & (processed_data['–ê0'] > 0) & (processed_data['—Ç, –º–∏–Ω'] >= 0)]

                    if valid_data.empty:
                        st.error("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.")
                    else:
                        # Calculate A/A0 ratios
                        valid_data = valid_data.copy()
                        valid_data['–ê/–ê0'] = valid_data['–ê'] / valid_data['–ê0']

                        # Validate the processed data
                        is_valid, error_message = validate_data_structure(valid_data)

                        if not is_valid:
                            st.error(f"{error_message}")
                        else:
                            # Check for additional validation
                            if valid_data['—Ç, –º–∏–Ω'].duplicated().any():
                                st.error("–ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è")
                            elif not valid_data['—Ç, –º–∏–Ω'].is_monotonic_increasing:
                                st.error("–ó–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ")
                            else:
                                # Data is valid, use it for analysis
                                df = valid_data.copy()
                                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã!")
                                st.info(f"–í–≤–µ–¥–µ–Ω–æ {len(df)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                                st.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ê0 = {first_a_value:.5f} –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")

    # Process data if we have valid data (from either source)
    if df is not None and not df.empty:
        pass  # Debug information removed as requested

        # Process data
        processed_df = preprocess_data(df)

        if len(processed_df) == 0:
            st.error("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            st.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            st.error("- –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ")
            st.error("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—è—Ç–∞—è –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏)")
            st.error("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
            return

        # Data summary with enhanced styling and emojis
        summary = get_data_summary(processed_df)

        st.markdown("""
        <div class="section-header-analysis">
            <h2>üìà –°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
        </div>
        """, unsafe_allow_html=True)

        # Enhanced metrics with custom styling
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.markdown(f"""
            <div class="summary-stat">
                <div class="metric-label">üìä –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏</div>
                <div class="metric-value">{summary['total_points']}</div>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="summary-stat">
                <div class="metric-label">‚è±Ô∏è –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏</div>
                <div class="metric-value">{summary['time_range'][0]:.1f} - {summary['time_range'][1]:.1f} –º–∏–Ω</div>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown(f"""
            <div class="summary-stat">
                <div class="metric-label">üß™ –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è</div>
                <div class="metric-value">{summary['a0_value']:.3f}</div>
            </div>
            """, unsafe_allow_html=True)

        with col4:
            st.markdown(f"""
            <div class="summary-stat">
                <div class="metric-label">üìä –î–∏–∞–ø–∞–∑–æ–Ω A/A0</div>
                <div class="metric-value">{summary['a_a0_range'][0]:.3f} - {summary['a_a0_range'][1]:.3f}</div>
            </div>
            """, unsafe_allow_html=True)

        # Find stable points (using fixed threshold of 0.1)
        stable_indices = find_stable_points(processed_df['ln_A_A0'], processed_df['—Ç, –º–∏–Ω'], 0.1)
        selected_data = processed_df.iloc[stable_indices].copy()

        st.markdown("""
        <div class="section-header-analysis">
            <h2>üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏</h2>
        </div>
        """, unsafe_allow_html=True)

        # Highlighted key information about selected points
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(f"""
            <div class="key-metric">
                <div class="metric-label">üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
                <div class="metric-value">{len(selected_data)} –∏–∑ {len(processed_df)}</div>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="key-metric">
                <div class="metric-label">‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</div>
                <div class="metric-value">{selected_data['—Ç, –º–∏–Ω'].iloc[0]:.1f} - {selected_data['—Ç, –º–∏–Ω'].iloc[-1]:.1f} –º–∏–Ω</div>
            </div>
            """, unsafe_allow_html=True)

        # Fit models
        try:
            k1, pfo_predictions, mape_pfo, r2_pfo = fit_pfo_model(selected_data)
            k2, pso_predictions, mape_pso, r2_pso = fit_pso_model(selected_data)

            # Results summary with enhanced styling and emojis
            st.markdown("""
            <div class="section-header-results">
                <h2>üìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
            </div>
            """, unsafe_allow_html=True)

            results_summary = create_results_summary(k1, k2, mape_pfo, mape_pso, r2_pfo, r2_pso)

            # Display summary table
            #st.subheader("üìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            st.dataframe(results_summary, use_container_width=True)

            # Model comparison metrics with enhanced performance styling
            st.markdown("""
            <div class="section-header-results">
                <h3>üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</h3>
            </div>
            """, unsafe_allow_html=True)

            col1, col2 = st.columns(2)
            with col1:
                st.markdown("### üîµ –ú–æ–¥–µ–ª—å PFO")

                # Enhanced performance metrics for PFO
                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">‚ö° –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k‚ÇÅ</div>
                    <div class="metric-value">{abs(k1):.5f} –º–∏–Ω‚Åª¬π</div>
                </div>
                
                """, unsafe_allow_html=True)
                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">üìä R¬≤ Score</div>
                    <div class="metric-value">{r2_pfo:.4f}</div>
                </div>
                """, unsafe_allow_html=True)

                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">üìà MAPE (%)</div>
                    <div class="metric-value">{mape_pfo:.2f}%</div>
                </div>
                """, unsafe_allow_html=True)

                

            with col2:
                st.markdown("### üü¢ –ú–æ–¥–µ–ª—å PSO")

                # Enhanced performance metrics for PSO
                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">‚ö° –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k‚ÇÇ</div>
                    <div class="metric-value">{k2:.5f} –ª/(–º–≥¬∑–º–∏–Ω)</div>
                </div>
                """, unsafe_allow_html=True)
                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">üìä R¬≤ Score</div>
                    <div class="metric-value">{r2_pso:.4f}</div>
                </div>
                """, unsafe_allow_html=True)

                st.markdown(f"""
                <div class="performance-metric">
                    <div class="metric-label">üìà MAPE (%)</div>
                    <div class="metric-value">{mape_pso:.2f}%</div>
                </div>
                """, unsafe_allow_html=True)

            # Detailed results
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                detailed_results = create_detailed_results(pfo_predictions, pso_predictions)
                st.dataframe(detailed_results, use_container_width=True)

            # Plots with enhanced styling and emoji
            st.markdown("""
            <div class="section-header-visualization">
                <h2>üìä –ì—Ä–∞—Ñ–∏–∫–∏</h2>
            </div>
            """, unsafe_allow_html=True)

            # Generate Matplotlib plots
            fig_main = create_matplotlib_plots(processed_df, selected_data, pfo_predictions, pso_predictions, k1, k2)
            st.pyplot(fig_main)

            # Download results with enhanced styling and emoji
            st.markdown("""
            <div class="section-header-download">
                <h2>üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
            </div>
            """, unsafe_allow_html=True)

            # Prepare download data
            download_data = {
                'Summary': results_summary,
                'Detailed_Results': detailed_results,
                'Selected_Data': selected_data,
                'PFO_Predictions': pfo_predictions,
                'PSO_Predictions': pso_predictions
            }

            # Create Excel file for download
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                for sheet_name, data in download_data.items():
                    data.to_excel(writer, sheet_name=sheet_name, index=False)

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Ñ–∞–π–ª Excel",
                data=output.getvalue(),
                file_name="kinetic_modeling_results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

    else:
        # Show instructions when no data is available
        if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
            pass
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main()
